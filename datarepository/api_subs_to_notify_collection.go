/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 2.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"net/http"

	"github.com/5g-core/openapi"
	. "github.com/5g-core/openapi/models"
	"github.com/5g-core/udr/logger"
	. "github.com/5g-core/udr/producer"
	"github.com/gin-gonic/gin"
)

// QuerySubsToNotify - Retrieves the list of subscriptions
func HttpQuerySubsToNotify(c *gin.Context) {
	logger.HandlerLog.Infof("QuerySubsToNotify is called")
    /// <param name="ueId type: string">UE id</param>
    /// <param name="supportedFeatures type: string">Supported Features (optional)</param>
	// Getting query params 
	queryParams := c.Request.URL.Query()
	// query parameter : basename ue-id paramName ueId
	ueId := queryParams[""]
	// query parameter : basename supported-features paramName supportedFeatures
	supportedFeatures := queryParams[""]
	rsp := HandleQuerySubsToNotify( ueId,supportedFeatures, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// RemoveMultipleSubscriptionDataSubscriptions - Deletes subscriptions identified by a given ue-id parameter
func HttpRemoveMultipleSubscriptionDataSubscriptions(c *gin.Context) {
	logger.HandlerLog.Infof("RemoveMultipleSubscriptionDataSubscriptions is called")
    /// <param name="ueId type: string">UE ID</param>
    /// <param name="nfInstanceId type: string">NF Instance ID (optional)</param>
    /// <param name="deleteAllNfs type: bool">Flag to delete subscriptions from all NFs (optional)</param>
    /// <param name="implicitUnsubscribeIndication type: bool">Implicit Unsubscribe Indication (optional)</param>
	// Getting query params 
	queryParams := c.Request.URL.Query()
	// query parameter : basename ue-id paramName ueId
	ueId := queryParams[""]
	// query parameter : basename nf-instance-id paramName nfInstanceId
	nfInstanceId := queryParams[""]
	// query parameter : basename delete-all-nfs paramName deleteAllNfs
	deleteAllNfs := queryParams[""]
	// query parameter : basename implicit-unsubscribe-indication paramName implicitUnsubscribeIndication
	implicitUnsubscribeIndication := queryParams[""]
	rsp := HandleRemoveMultipleSubscriptionDataSubscriptions( ueId,nfInstanceId,deleteAllNfs,implicitUnsubscribeIndication, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// SubscriptionDataSubscriptions - Subscription data subscriptions
func HttpSubscriptionDataSubscriptions(c *gin.Context) {
	logger.HandlerLog.Infof("SubscriptionDataSubscriptions is called")
    /// <param name="subscriptionDataSubscriptions type: SubscriptionDataSubscriptions"></param>
	// get and parse body
	var subscriptionDataSubscriptions SubscriptionDataSubscriptions
	if err := getDataFromRequestBody(c, &subscriptionDataSubscriptions); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := HandleSubscriptionDataSubscriptions( subscriptionDataSubscriptions, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}
