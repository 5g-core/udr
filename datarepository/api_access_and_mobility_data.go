/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 2.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"net/http"

	"github.com/5g-core/openapi"
	. "github.com/5g-core/openapi/models"
	"github.com/5g-core/udr/logger"
	. "github.com/5g-core/udr/producer"
	"github.com/gin-gonic/gin"
)

// CreateOrReplaceAccessAndMobilityData - Creates and updates the access and mobility exposure data for a UE
func HttpCreateOrReplaceAccessAndMobilityData(c *gin.Context) {
	logger.HandlerLog.Infof("CreateOrReplaceAccessAndMobilityData is called")
    /// <param name="ueId type: string">UE id</param>
    /// <param name="accessAndMobilityData type: AccessAndMobilityData"></param>
    // Getting the path params
	ueId :=c.Params.ByName("ueId")
	// get and parse body
	var accessAndMobilityData AccessAndMobilityData
	if err := getDataFromRequestBody(c, &accessAndMobilityData); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := HandleCreateOrReplaceAccessAndMobilityData( ueId,accessAndMobilityData, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// DeleteAccessAndMobilityData - Deletes the access and mobility exposure data for a UE
func HttpDeleteAccessAndMobilityData(c *gin.Context) {
	logger.HandlerLog.Infof("DeleteAccessAndMobilityData is called")
    /// <param name="ueId type: string">UE id</param>
    // Getting the path params
	ueId :=c.Params.ByName("ueId")
	rsp := HandleDeleteAccessAndMobilityData( ueId, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// QueryAccessAndMobilityData - Retrieves the access and mobility exposure data for a UE
func HttpQueryAccessAndMobilityData(c *gin.Context) {
	logger.HandlerLog.Infof("QueryAccessAndMobilityData is called")
    /// <param name="ueId type: string">UE id</param>
    /// <param name="suppFeat type: string">Supported Features (optional)</param>
    // Getting the path params
	ueId :=c.Params.ByName("ueId")
	// Getting query params 
	queryParams := c.Request.URL.Query()
	// query parameter : basename supp-feat paramName suppFeat
	suppFeat := queryParams[""]
	rsp := HandleQueryAccessAndMobilityData( ueId,suppFeat, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// UpdateAccessAndMobilityData - Updates the access and mobility exposure data for a UE
func HttpUpdateAccessAndMobilityData(c *gin.Context) {
	logger.HandlerLog.Infof("UpdateAccessAndMobilityData is called")
    /// <param name="ueId type: string">UE id</param>
    /// <param name="accessAndMobilityData type: AccessAndMobilityData"></param>
    // Getting the path params
	ueId :=c.Params.ByName("ueId")
	// get and parse body
	var accessAndMobilityData AccessAndMobilityData
	if err := getDataFromRequestBody(c, &accessAndMobilityData); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := HandleUpdateAccessAndMobilityData( ueId,accessAndMobilityData, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}
