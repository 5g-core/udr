/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 2.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"net/http"

	"github.com/5g-core/openapi"
	. "github.com/5g-core/openapi/models"
	"github.com/5g-core/udr/logger"
	. "github.com/5g-core/udr/producer"
	"github.com/gin-gonic/gin"
)

// CreateIndividualBdtData - Creates an BDT data resource associated with an BDT reference Id
func HttpCreateIndividualBdtData(c *gin.Context) {
	logger.HandlerLog.Infof("CreateIndividualBdtData is called")
    /// <param name="bdtReferenceId type: string"></param>
    /// <param name="bdtData type: BdtData"></param>
    // Getting the path params
	bdtReferenceId :=c.Params.ByName("bdtReferenceId")
	// get and parse body
	var bdtData BdtData
	if err := getDataFromRequestBody(c, &bdtData); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := HandleCreateIndividualBdtData( bdtReferenceId,bdtData, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// DeleteIndividualBdtData - Deletes an BDT data resource associated with an BDT reference Id
func HttpDeleteIndividualBdtData(c *gin.Context) {
	logger.HandlerLog.Infof("DeleteIndividualBdtData is called")
    /// <param name="bdtReferenceId type: string"></param>
    // Getting the path params
	bdtReferenceId :=c.Params.ByName("bdtReferenceId")
	rsp := HandleDeleteIndividualBdtData( bdtReferenceId, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// ReadIndividualBdtData - Retrieves the BDT data information associated with a BDT reference Id
func HttpReadIndividualBdtData(c *gin.Context) {
	logger.HandlerLog.Infof("ReadIndividualBdtData is called")
    /// <param name="bdtReferenceId type: string"></param>
    /// <param name="suppFeat type: string">Supported Features (optional)</param>
    // Getting the path params
	bdtReferenceId :=c.Params.ByName("bdtReferenceId")
	// Getting query params 
	queryParams := c.Request.URL.Query()
	// query parameter : basename supp-feat paramName suppFeat
	suppFeat := queryParams[""]
	rsp := HandleReadIndividualBdtData( bdtReferenceId,suppFeat, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// UpdateIndividualBdtData - Modifies an BDT data resource associated with an BDT reference Id
func HttpUpdateIndividualBdtData(c *gin.Context) {
	logger.HandlerLog.Infof("UpdateIndividualBdtData is called")
    /// <param name="bdtReferenceId type: string"></param>
    /// <param name="bdtDataPatch type: BdtDataPatch"></param>
    // Getting the path params
	bdtReferenceId :=c.Params.ByName("bdtReferenceId")
	// get and parse body
	var bdtDataPatch BdtDataPatch
	if err := getDataFromRequestBody(c, &bdtDataPatch); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := HandleUpdateIndividualBdtData( bdtReferenceId,bdtDataPatch, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}
