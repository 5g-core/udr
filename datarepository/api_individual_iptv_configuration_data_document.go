/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 2.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"net/http"

	"github.com/5g-core/openapi"
	. "github.com/5g-core/openapi/models"
	"github.com/5g-core/udr/logger"
	. "github.com/5g-core/udr/producer"
	"github.com/gin-gonic/gin"
)

// CreateOrReplaceIndividualIPTVConfigurationData - Create or update an individual IPTV configuration resource
func HttpCreateOrReplaceIndividualIPTVConfigurationData(c *gin.Context) {
	logger.HandlerLog.Infof("CreateOrReplaceIndividualIPTVConfigurationData is called")
    /// <param name="configurationId type: string">The Identifier of an Individual IPTV Configuration Data to be created or updated. It shall apply the format of Data type string.</param>
    /// <param name="iptvConfigData type: IptvConfigData"></param>
    // Getting the path params
	configurationId :=c.Params.ByName("configurationId")
	// get and parse body
	var iptvConfigData IptvConfigData
	if err := getDataFromRequestBody(c, &iptvConfigData); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := HandleCreateOrReplaceIndividualIPTVConfigurationData( configurationId,iptvConfigData, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// DeleteIndividualIPTVConfigurationData - Delete an individual IPTV configuration resource
func HttpDeleteIndividualIPTVConfigurationData(c *gin.Context) {
	logger.HandlerLog.Infof("DeleteIndividualIPTVConfigurationData is called")
    /// <param name="configurationId type: string">The Identifier of an Individual IPTV Configuration to be updated. It shall apply the format of Data type string.</param>
    // Getting the path params
	configurationId :=c.Params.ByName("configurationId")
	rsp := HandleDeleteIndividualIPTVConfigurationData( configurationId, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}
