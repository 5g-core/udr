/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 2.1.5
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"net/http"

	"github.com/5g-core/openapi"
	. "github.com/5g-core/openapi/models"
	"github.com/5g-core/udr/logger"
	. "github.com/5g-core/udr/producer"
	"github.com/gin-gonic/gin"
)

// CreateOrReplaceSessionManagementData - Creates and updates the session management data for a UE and for an individual PDU session
func HttpCreateOrReplaceSessionManagementData(c *gin.Context) {
	logger.HandlerLog.Infof("CreateOrReplaceSessionManagementData is called")
    /// <param name="ueId type: string">UE id</param>
    /// <param name="pduSessionId type: int32">PDU session id</param>
    /// <param name="pduSessionManagementData type: PduSessionManagementData"></param>
    // Getting the path params
	ueId :=c.Params.ByName("ueId")
	pduSessionId :=c.Params.ByName("pduSessionId")
	// get and parse body
	var pduSessionManagementData PduSessionManagementData
	if err := getDataFromRequestBody(c, &pduSessionManagementData); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := HandleCreateOrReplaceSessionManagementData( ueId,pduSessionId,pduSessionManagementData, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// DeleteSessionManagementData - Deletes the session management data for a UE and for an individual PDU session
func HttpDeleteSessionManagementData(c *gin.Context) {
	logger.HandlerLog.Infof("DeleteSessionManagementData is called")
    /// <param name="ueId type: string">UE id</param>
    /// <param name="pduSessionId type: int32">PDU session id</param>
    // Getting the path params
	ueId :=c.Params.ByName("ueId")
	pduSessionId :=c.Params.ByName("pduSessionId")
	rsp := HandleDeleteSessionManagementData( ueId,pduSessionId, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

// QuerySessionManagementData - Retrieves the session management data for a UE and for an individual PDU session
func HttpQuerySessionManagementData(c *gin.Context) {
	logger.HandlerLog.Infof("QuerySessionManagementData is called")
    /// <param name="ueId type: string">UE id</param>
    /// <param name="pduSessionId type: int32">PDU session id</param>
    /// <param name="ipv4Addr type: string">IPv4 Address of the UE (optional)</param>
    /// <param name="ipv6Prefix type: Ipv6Prefix">IPv6 Address Prefix of the UE (optional)</param>
    /// <param name="dnn type: string">DNN of the UE (optional)</param>
    /// <param name="fields type: []string">attributes to be retrieved (optional)</param>
    /// <param name="suppFeat type: string">Supported Features (optional)</param>
    // Getting the path params
	ueId :=c.Params.ByName("ueId")
	pduSessionId :=c.Params.ByName("pduSessionId")
	// Getting query params 
	queryParams := c.Request.URL.Query()
	// query parameter : basename ipv4-addr paramName ipv4Addr
	ipv4Addr := queryParams[""]
	// query parameter : basename ipv6-prefix paramName ipv6Prefix
	ipv6Prefix := queryParams[""]
	// query parameter : basename dnn paramName dnn
	dnn := queryParams[""]
	// query parameter : basename fields paramName fields
	fields := queryParams[""]
	// query parameter : basename supp-feat paramName suppFeat
	suppFeat := queryParams[""]
	rsp := HandleQuerySessionManagementData( ueId,pduSessionId,ipv4Addr,ipv6Prefix,dnn,fields,suppFeat, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "Serialize Response Body error: " + err.Error()
		var status int32
		status =int32(http.StatusBadRequest)
		title:="Malformed request syntax"
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}
